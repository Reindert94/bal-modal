import { ComponentInterface, EventEmitter } from '../../../stencil-public-runtime';
import { BalConfigObserver, BalConfigState, BalLanguage, BalRegion } from '../../../utils/config';
import { FormInput } from '../../../utils/form-input';
import { BalAriaForm, BalAriaFormLinking } from '../../../utils/form';
import { Loggable, LogInstance } from '../../../utils/log';
export declare class NumberInput implements ComponentInterface, BalConfigObserver, FormInput<number | undefined>, BalAriaFormLinking, Loggable {
  private inputId;
  private inheritedAttributes;
  lastValue: string;
  nativeInput?: HTMLInputElement;
  inputValue?: number;
  initialValue?: number;
  el: HTMLElement;
  focused: boolean;
  language: BalLanguage;
  region: BalRegion;
  ariaForm: BalAriaForm;
  nativeInputValue: string;
  inputPattern: string;
  log: LogInstance;
  createLogger(log: LogInstance): void;
  name: string;
  invalid: boolean;
  decimal: number;
  suffix?: string;
  pattern?: string;
  placeholder?: string;
  required: boolean;
  disabled: boolean;
  readonly: boolean;
  exactNumber: boolean;
  max?: string;
  min?: string;
  debounce: number;
  protected debounceChanged(): void;
  value?: number;
  protected valueChanged(newValue: number | undefined, oldValue?: number): void;
  balInput: EventEmitter<BalEvents.BalNumberInputInputDetail>;
  balChange: EventEmitter<BalEvents.BalNumberInputChangeDetail>;
  balBlur: EventEmitter<BalEvents.BalNumberInputBlurDetail>;
  balFocus: EventEmitter<BalEvents.BalNumberInputFocusDetail>;
  balKeyPress: EventEmitter<BalEvents.BalNumberInputKeyPressDetail>;
  connectedCallback(): void;
  componentDidLoad(): void;
  componentWillLoad(): void;
  listenOnClick(ev: UIEvent): void;
  private resetHandlerTimer?;
  resetHandler(ev: UIEvent): void;
  configChanged(state: BalConfigState): Promise<void>;
  setFocus(): Promise<void>;
  setBlur(): Promise<void>;
  getInputElement(): Promise<HTMLInputElement>;
  setAriaForm(ariaForm: BalAriaForm): Promise<void>;
  private createPattern;
  private get lastValueGetter();
  private onClick;
  private handleClick;
  private onInput;
  private onFocus;
  private onBlur;
  private onKeydown;
  render(): any;
}
